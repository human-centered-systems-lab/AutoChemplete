"""
The code below serves to generate a train image set by inputting dataframes
by group previously generated in the dataframe_generation_by_group.
The images generated are stored in folders generated by sequence length,
and are used for the gernalization of model learning.
"""


import rdkit
import os
import numpy as np
import pandas as pd
from rdkit import Chem
from rdkit.Chem import Draw
import click

#from tqdm import tqdm
from tqdm.auto import tqdm # solve the problem of each iteration of progressbar starts a new line

import warnings
warnings.filterwarnings(action = 'ignore')
from rdkit import RDLogger
RDLogger.DisableLog('rdApp.*')

print("start 5M")
# path
path = '/org/temp/anon/data/new_images_5M_75/' # Saving new data
if not os.path.exists(path):
    os.mkdir(path)
else:
    pass


img_path = path + '/train' # Saving new image

data_path = '/org/temp/anon/data/train_dataset_10M'
if not os.path.exists(img_path):
    os.mkdir(img_path)
else:
    pass

# Oragainizing the group by the number of core
# The number of data sameple for one group calculated as
# the number of total data sample / the number of core
# ex) 111307682 / 31 = 3700000
# The number of core can be different by each environment

file_writer = open(path + "/train.csv", 'w')
file_writer.write("file_name,SMILES"+"\n")


@click.command()
@click.option('--group', default=4, help='group number')


def making_data(group):
    count = 0
    for i in range(5):
        print("group number:", group)

        filtered_df = pd.read_csv(data_path +'/filtered_df_group{}.csv'.format(group))
        data_len = len(filtered_df)
        #data_len = 3
        print("data length of this group:", data_len)
        #print("The first line of csv file:", filtered_df[:][:1])
        group += 1

        # for idx in tqdm(range(len(filtered_df[filtered_df['group'] == group]))):
        for idx in range(3):
            smiles = filtered_df['SMILES'][idx]  # this is the representation string
            #print(smiles)
            if len(smiles) <= 75:
                count += 1
                img_name = str(count) + ".png"
                smiles_g = Chem.MolFromSmiles(smiles)
                try:
                    # smile_plt is the image so we can directly save it.
                    smile_plt = Draw.MolToImage(smiles_g, size = (300,300))

                    img_full_name = os.path.join(img_path, img_name)
                    file_writer.write(img_name + "," + smiles + "\n")
                    smile_plt.save(img_full_name)  # save the image in png
                    assert len(smiles) <= 75
                    del (smile_plt)
                except ValueError:
                    pass
            else:
                pass


            # checking the completion
            if idx % 1 == 0 :
                print('group : {0}, index : {1}'.format(group-1, idx))

        del(filtered_df)
        print("Number of length <=75 is {0}".format(count))

#file_writer.close()

if __name__ == '__main__':
    making_data()
