from pathlib import Path

## Data provided by PubChem group1
"""train"""
# data_dir = Path('/org/temp/anon/data/new_images_1M_group1')
# train_dir = data_dir / 'train_img' # training images path
# train_csv_dir = data_dir / 'train.csv'
# # train_modified contains information of the train/validation split in a pickle file format. I saved in pickle just for efficiency
# train_pickle_dir = data_dir /'train_modified.pkl'
#
# ### Data directory generated by us
# input_data_dir = data_dir / 'input_data' # output path
# base_file_name = 'seed_910_max100smiles'
### seed for train/val split
# random_seed = 910
# ### Reversed_token_file used to map numbers to string.
# reversed_token_map_dir = input_data_dir/ f'REVERSED_TOKENMAP_{base_file_name}.json'


## Data provided by PubChem group2
"""train"""
# #generate train_modified.pkl
# data_dir = Path('/org/temp/anon/data/new_images_1M_group2')
# train_dir = data_dir / 'train' # training images path
# train_csv_dir = data_dir / 'train.csv'
# # # train_modified contains information of the train/validation split in a pickle file format. I saved in pickle just for efficiency
# train_pickle_dir = data_dir /'train_modified.pkl'
# #
# # ### Data directory generated by us
# input_data_dir = data_dir / 'input_data' # output path
#
# random_seed = 123



"""test"""

# ###Test fromPubChem <75
# test_dir = '/org/temp/anon/data/testset_isomeric/test_img_100K/'
# sample_submission_dir = '/org/temp/anon/data/testset_isomeric/test_100K.csv'
# generate_submission_dir = 'test_100K_pred.csv'
# sample_submission_labels_dir = '/org/temp/anon/data/testset_isomeric/test_100K_labels.csv'

###Test fromPubChem length between 75 and 100
test_dir = '/org/temp/anon/data/testset_isomeric/test_img_75to100_100K/'
sample_submission_dir = '/org/temp/anon/data/testset_isomeric/test_100K_75to100.csv'
generate_submission_dir = 'test_100K_75to100_pred.csv'
sample_submission_labels_dir = '/org/temp/anon/data/testset_isomeric/test_100K_75to100_labels.csv'


# ###submission test
# test_dir = '/org/temp/anon/data/DACON_SMILES_data/test/'
# sample_submission_dir = '/org/temp/anon/data/DACON_SMILES_data/sample_submission.csv'
# generate_submission_dir = 'sample_submission.csv'


###RDKit test clear
# test_dir = '/org/temp/anon/data/RDkit_SMILES_gray/test_clear/'
# sample_submission_dir = '/org/temp/anon/data/RDkit_SMILES_gray/test_RDKit.csv'
# generate_submission_dir = 'test_RDKit_clear_pred.csv'
# sample_submission_labels_dir = '/org/temp/anon/data/RDkit_SMILES_gray/test_RDKit_labels.csv'


###RDKit test noise
# test_dir = '/org/temp/anon/data/RDkit_SMILES_gray/test_noise/'
# sample_submission_dir = '/org/temp/anon/data/RDkit_SMILES_gray/test_RDKit.csv'
# generate_submission_dir = 'test_RDKit_noise_pred.csv'
# sample_submission_labels_dir = '/org/temp/anon/data/RDkit_SMILES_gray/test_RDKit_labels.csv'


###ChEMBL test <75
# test_dir = '/org/temp/anon/data/ChEMBL/chembl/test/'
# sample_submission_dir = '/org/temp/anon/data/ChEMBL/chembl/test.csv'
# generate_submission_dir = 'test_chem75_pred.csv'
# sample_submission_labels_dir = '/org/temp/anon/data/ChEMBL/chembl/test_labels.csv'

###ChEMBL test 75<length<100
# test_dir = '/org/temp/anon/data/ChEMBL/chembl_100/test/'
# sample_submission_dir = '/org/temp/anon/data/ChEMBL/chembl_100/test.csv'
# generate_submission_dir = 'test_chem75-100_pred.csv'
# sample_submission_labels_dir = '/org/temp/anon/data/ChEMBL/chembl_100/test_labels.csv'



#python /org/temp/anon/data/model/src/create_input_files.py --train_file True
## Multi-datasetï¼š
# lg dataset + 1M PubChem
"""train"""

data_dir = Path('/org/temp/anon/data/PubChem5M_ChEMBL100')
#data_dir_1 = Path('/org/temp/anon/data/DACON_SMILES_data') #DACON
data_dir_1 = Path('/org/temp/anon/data/new_images_5M_75')
#data_dir_2 = Path('/org/temp/anon/data/new_images5M_75_noise')

#data_dir_2 = Path('/org/temp/anon/data/new_images_1M_group2') #PubChem_1M_group2 <75
#data_dir_2 = Path('/org/temp/anon/data/new_images_1M_group1')
#data_dir_3 = Path('/org/temp/anon/data/ChEMBL/chembl_100')
data_dir_3 = Path('/org/temp/anon/data/RDkit_SMILES_gray')
data_dir_2 = Path('/org/temp/anon/data/new_images_5M_75_noise')

train_dir_1 = data_dir_1 / 'train' # training images path #DACON
train_dir_2 = data_dir_2 / 'train' # training images path #PubChem
train_dir_3 = data_dir_3 / 'train_clear' # training images path #RDKit_clear
train_dir_4 = data_dir_3 / 'train_noise' # training images path #RDKit_noise


# train_modified contains information of the train/validation split in a pickle file format. I saved in pickle just for efficiency
train_pickle_dir_1 = data_dir_1 /'train_modified.pkl'
train_pickle_dir_2 = data_dir_2 /'train_modified.pkl'
train_pickle_dir_3 = data_dir_3 /'train_modified.pkl'
train_pickle_dir_4 = data_dir_3 /'train_modified.pkl'

### Data directory generated by us
input_data_dir = data_dir / 'input_data' # output path
base_file_name = 'seed_123_max100smiles'


### seed for train/val split
random_seed = 123

### Reversed_token_file used to map numbers to string.
reversed_token_map_dir = input_data_dir/ f'REVERSED_TOKENMAP_{base_file_name}.json'

train_dirs = list()
train_dirs.append(train_dir_1)
train_dirs.append(train_dir_2)
train_dirs.append(train_dir_3)
train_dirs.append(train_dir_4)

train_pickle_dirs = list()
train_pickle_dirs.append(train_pickle_dir_1)
train_pickle_dirs.append(train_pickle_dir_2)
train_pickle_dirs.append(train_pickle_dir_3)
train_pickle_dirs.append(train_pickle_dir_4)

'''generate train_pickle'''
train_csv_dir = data_dir / 'train.csv' #generate train_pickle
#train_csv_dir = data_dir_2 / 'train.csv' #generate train_pickle for 1M pubChem